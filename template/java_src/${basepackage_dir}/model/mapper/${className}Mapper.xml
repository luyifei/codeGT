<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>   
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace>${className}.</#macro>

<mapper namespace="${className}Mapper">
	<resultMap id="BaseResultMap" type="${basepackage}.entity.${className}">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName}"/>
		</#list>
	</resultMap>
	
	<sql id="columns">
		<#list table.columns as column>${column.sqlName}<#if column_has_next>,</#if></#list>
	</sql>

	<insert id="${className}_insert" parameterType="${basepackage}.entity.${className}">
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	${column.sqlName} <#if column_has_next>,</#if>
        </#list>
        ) VALUES (
        <#list table.columns as column>
        	<@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
        </#list>        
        )
	</insert>
	
	<insert id="${className}_insertSelective" parameterType="${basepackage}.entity.${className}">
        INSERT INTO ${table.sqlName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
	        <#list table.columns as column>
	            <if test="${column.sqlName} != null">
	                ${column.sqlName},
	            </if>
	        </#list>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <#list table.columns as column>
                <if test="${column.sqlName} != null">
	               <@mapperEl column.columnNameFirstLower/>,
	            </if>
	        </#list> 
        </trim>
    </insert>
    
	<update id="${className}_update" parameterType="${basepackage}.entity.${className}">
        UPDATE ${table.sqlName} SET
	        <#list table.notPkColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	        </#list>
        WHERE 
        	<#list table.compositeIdColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next> AND </#if>
	        </#list>	        
	</update>
	
	<!-- 更新指定列 TODO -->
	<update id="updateByPrimaryKeySelective" parameterType="${basepackage}.entity.${className}">
	</update>

    <delete id="${className}_deleteByPrimaryKey" parameterType="java.lang.Long">
    <![CDATA[
        DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		</#list>
    ]]>
    </delete>
    
    <select id="${className}_getById" parameterType="java.lang.Long" resultMap="BaseResultMap">
		SELECT <include refid="columns" />
		    FROM ${table.sqlName} 
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		        </#list>    
	</select>
	
	<sql id="list_where">
		<where>	      				
	       <#list table.columns as column>
	       <#if column.isDateTimeColumn>
	       <if test="${column.columnNameFirstLower} != null">
				AND ${column.sqlName} >= <@mapperEl column.columnNameFirstLower+"Begin"/>
		   </if>
		   <if test="${column.columnNameFirstLower} != null">
				AND ${column.sqlName} &lt;= <@mapperEl column.columnNameFirstLower+"End"/>
		   </if>
	       <#else>
	       <if test="${column.columnNameFirstLower} != null">
				AND ${column.sqlName} = <@mapperEl column.columnNameFirstLower/>
			</if>
	       </#if>
	       </#list>			
		</where>
	</sql>
		
    <select id="list_count" parameterType="${basepackage}.entity.${className}Query" resultType="java.lang.Long">
        SELECT count(1) FROM ${table.sqlName} 
		<include refid="list_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="list" resultMap="BaseResultMap">
    	SELECT <include refid="columns" />
	    FROM ${table.sqlName} 
		<include refid="list_where"/>
		<if test="sortColumns != null">
			ORDER BY <@jspEl 'sortColumns'/>
		</if>
    </select>

    <#list table.columns as column>
    <#if column.unique && !column.pk>
    <select id="getBy${column.columnName}" resultMap="BaseResultMap" parameterType="${column.javaType}">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM ${table.sqlName} where ${column.sqlName} = <@mapperEl column.columnNameLower/>
	    ]]>
    </select>
    
    </#if>
	</#list>
	
</mapper>

